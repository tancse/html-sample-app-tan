pipeline{
    agent any //selection of agents
    // defining environment variables
    environment{
        SONAR_HOME = 'C:\\Users\\Administrator\\Documents\\tools\\sonar-scanner\\bin'
        REPO_NAME = 'https://github.com/tancse/html-sample-app-tan.git'
        BRANCH_NAME = 'master'
        SONAR_TOKEN = credentials('html-css-app-tan-pro3')
        DOCKER_CREDS = 'tan-dockerhub'
        SONAR_PROJECT_KEY = 'tan_devops_d3'
        SONAR_SERVER_NAME = 'tan_sonarqube' //name given for the sonarqube link in jenkins manage settings
        TRIVY_REPORT = 'trivy_report.json'
        DOCKER_IMAGE = 'thananya/tanwebapp-iis-ltsc2022:codev1'
    }
    stages{
        //stage 1
        stage('testing and verify required command'){
            steps{
                echo 'hello world'
                //bat or pwsh
                bat """ 
                %SONAR_HOME%\\sonar-scanner --version
                echo == checking docker ===>
                docker version
                echo == java version ===>
                java --version
                """
            }
        }
        //git checkout
        stage('takign code of github repo'){
            steps{
                echo 'cloning repo'
                git url:"${REPO_NAME}", branch:"${BRANCH_NAME}"
            }
        }
        // doing sast with sonarqube
        stage('SAST with sonar-scanner'){
            steps {
                 echo 'wait for sonar-scanner to finish'
                 // calling plugin
                 script {
                    withSonarQubeEnv("${SONAR_SERVER_NAME}") {
                
                    bat """
                    %SONAR_HOME%\\sonar-scanner \
                    -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                    -Dsonar.sources=. \
                    -Dsonar.host.url=${SONAR_HOST_URL} \
                    -Dsonar.token=${SONAR_TOKEN}
                    """

                    }
                }
            }
        } 
        // using docker plugins to build container image
        stage('building docker image'){
            steps{
                echo 'starting docker build process'
                script{
                    def imageName = "docker.io/thananya/tanwebapp-iis-ltsc2022"
                    def imageTag = "codev1"
                    docker.build("${imageName}:${imageTag}",".")
                }
                //verify image build
                bat 'docker images | findstr tanwebapp'
            }
        }   
        // stage to scan the image for vuln
        stage('Scan the image using trivy'){
            echo 'start scanning vuln using trivy'
            script {
                    // Install trivy if not available
                    sh '''
                        if ! command -v trivy &> /dev/null; then
                            echo "Installing Trivy..."
                            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
                        fi
                    '''

                    // Scan image and output to JSON
                    sh "trivy image --severity HIGH,CRITICAL --format json --output $TRIVY_NAME $DOCKER_IMAGE"
                }
        }
        //pushing image to docker hub
        /*stage('Docker hub image push'){
            steps{
                echo 'Pushing image to docker hub'
                script{
                    def imageName = "thananya/tanwebapp-iis-ltsc2022"
                    def imageTag = "codev1"
                    def hubcreds = "${DOCKER_CREDS}"
                    docker.withRegistry('https://registry.hub.docker.com', hubcreds){
                        docker.image(imageName + ":" + imageTag).push()
                    }

                }
            }
        }*/
    }
}